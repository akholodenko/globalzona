<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication width="510" height="700" xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" title="MySpaceID SDK AS3 Demo">
	<mx:Script>
		<![CDATA[
			import com.myspace.sdk.MySpaceID.MySpace;
			import com.myspace.sdk.Utils.URLEncoding;
			import com.myspace.sdk.oAuth.*;		

			
			public var userId_internal:String = "12353591";	//ADK's user id
			private var _xml_ns:Namespace = new Namespace("api-v1.myspace.com");
			private var _timerStatus:Timer;
			private var _timerMood:Timer;
			private var _moodId:String;
			private var _isMoodUpdating:Boolean = false;
			
			private var oAuthToken:OAuthToken;
        	private var oAuthAccessToken:OAuthToken;
        	
        	private var key:String = "http://www.myspace.com/443468196";
        	private var secret:String = "eaa6edf5836c4d37948aef0f1cfc2e35";
        	
        	private var key_OFFSITE:String = "77f44916a5144c97ad1ddc9ec53338cc";
        	private var secret_OFFSITE:String = "51951d1f872c454d8932cd5f135623ae";
        	
        	private var key_RESN:String = "05db806ff3e4452785c688b506d87280";
        	private var secret_RESN:String = "0d7c61604c1646a386b08bb1be2f250f947a49085af34c70a4fd47d7de149c7b";
        	
        	public var callbackURL:String = "http://localhost:8080/myspaceid-sample/oauth/oauth-demo.jsp?callback=true";
			
			//MySpace object with hardcoded (for testing) key and secret)
			public var ms:MySpace;
			private var ms2:MySpace;
			
			public function getAll ():void
			{
				//ms = new MySpace(this.key, this.secret);
				//ms = new MySpace(this.key_OFFSITE, this.secret_OFFSITE);
				//ms = new MySpace("b77560ba6eba40439dc79b76eabae8bb", "a3d26d1579d14b46bf1265d49fff7dcd46cf33a0f27845eda02aca228582bcc4");
				ms = new MySpace(this.key_RESN, this.secret_RESN);	//LOGIN test
				//this.callbackURL = "http://test.zingzag.com/";
				//this.getUser();	//offsite only
				
				/* this.getProfile();
				this.getActivities();
				this.getMoods();
				this.getMood();	//get user's current mood
				this.getStatus();  */
				
				/*
				 	NOTE: 
				 	
				 	In order to use the get/add photos functionality, you must
				 	have an access token (go through authorizatioh process)
				 	
				 	GetAlbums can be used independently, but in order to retrieve
				 	a list of albums and then add to them, must have access token 
				 */  			
				 
				//this.getPhotoAlbums();	
				 

				//ms.addAlbum(this.userId_internal, "August", this.onPutRequestComplete);
				//ms.getAlbums(this.userId_internal, this.onGetRequestComplete);
				//ms.getAlbum(this.userId_internal, "818818", this.onGetRequestComplete);
				//ms.getAlbumPhoto(this.userId_internal, "818818", "114491", this.onGetRequestComplete);
				//ms.getAlbumInfo(this.userId_internal, "818818", this.onGetRequestComplete);
				//ms.getPhotos(this.userId_internal, this.onGetRequestComplete);
				//ms.getPhoto(this.userId_internal, "114491", this.onGetRequestComplete);
				//ms.getFriendsStatus(this.userId_internal, this.onGetRequestComplete);
				//ms.getVideos(this.userId_internal, this.onGetRequestComplete);
				//ms.getVideo(this.userId_internal, "55493583", this.onGetRequestComplete);
				//ms.getFriendship(this.userId_internal, "40730983;94237623;2557776", this.onGetRequestComplete);
				//ms.getIndicators(this.userId_internal, this.onGetRequestComplete);
				//ms.getFriendsActivitiesAtom(this.userId_internal, this.onGetRequestComplete, null, null, "AddSongToPlaylist|FavoriteVideoAdd");
				//testPutAppData();
				//ms.getAppData(this.userId_internal, this.onGetRequestComplete);
				//ms.getGlobalAppData(this.onGetRequestComplete);
				//testPutGlobalAppData();
				//ms.clearGlobalAppData("492787761");
				//ms.clearAppData(userId_internal, "job;animal");
				//ms.getUserFriendsAppData(this.userId_internal, this.onGetRequestComplete);
				
				//ms.getRequestToken(onRequestCompleteRequestToken, this.callbackURL);
				//testGetAccessToken();
				//ms.getFriendsList(this.userId_internal, this.onGetRequestComplete, "40730983;94237623;2557776", "mood|status");
				
				this.login();												
			}
			
			public function dataNavigationClickHandler(event:Event):void
			{
				
			}
			
			public function login():void
			{
				ms.login("hello@resn.co.nz","321qwe321", this.onLoginComplete);	
			}
			
			public function onLoginComplete (xml:XML):void
			{
				trace("=================onLoginComplete===================");
				trace(xml);
				
				var xml_namespace:Namespace = new Namespace("http://myspace.com/roa/login/0.8");
				
				trace("token: " + xml.xml_namespace::token);
				trace("tokenSecret: " + xml.xml_namespace::tokenSecret);
				trace("userId: " + xml.xml_namespace::userId);
				
				this.oAuthAccessToken = new OAuthToken(xml.xml_namespace::token, xml.xml_namespace::tokenSecret);
				this.ms2 = new MySpace(this.key_RESN, this.secret_RESN, true, this.oAuthAccessToken.key, this.oAuthAccessToken.secret);
				this.addGalleryPhoto();
			}
			
			public function addGalleryPhoto():void
			{
				var file:File = new File("file:///C:/smiley.jpg"); 
				var stream:FileStream = new FileStream(); 
				var imageData:ByteArray = new ByteArray(); 

				stream.open(file, FileMode.READ);
				stream.readBytes(imageData, 0, file.size);
				stream.close();
								
				//ms2.addPhoto(this.userId_internal, albumid, caption, imageData, "image/jpeg", onAddPhotoComplete);
				ms2.addGalleryPhoto(imageData, "image/jpeg", this.onAddGalleryPhotoComplete, true);
			}
			
			public function onAddGalleryPhotoComplete (xml:XML):void
			{
				trace(xml);
			}
			
			public function getUser ():void
			{
				ms.getUser(onGetRequestComplete);
			}
			
			public function getFriends ():void
			{
				ms.getFriends(this.userId_internal, this.onGetFriendsRequestComplete, 2);
			}
			
			public function testGetAccessToken ():void
			{
				//oauth_token=JdzyTyAVOiINn%2Fhxsd8ksdcG56QFGQJG1t9VRAZsLClKKWenQrhEUO8nkpETGwxPPG2MkVIZ8nIQJGk7lzFS%2FfTb2v0iM5bb61mPmZMHrQ1nHnhGCZ7ORULvhzSYTmGy&oauth_token_secret=9fa7b73dc633491e9fc8156b04226f5e49cac6fbcc7a442f921d8fc0efcf4dbf&oauth_callback_confirmed=true
				//1178deed-a36f-458e-8c32-3891949a546f
				//paste in the request token raw string to create request token
				var newToken:OAuthToken = new OAuthToken("","","oauth_token=PuccTkdcj%2BxuvC9nPel4ac%2BTFmwZk%2BlIFjamCnd0SwzHYwbCryROwBEDfxBfQRT8D2O2SWhQnTZY4nGvvjtklaZMco7sorv46pbaTli6Lj5I18WTVo%2BZC4ShFts8k%2BDX&oauth_token_secret=ed8f1f47b01744abac2069898e6d952eff6e2d26c8b442d8b6b7591d1aaf3b55&oauth_callback_confirmed=true");
				ms.getAccessToken(newToken, onRequestCompleteAccessToken, "a99238a4-5b3d-4d01-a064-362786ed32d4");
			}
							
			public function testPutAppData():void
			{
				//test putAppData
				var appParams:Object = new Object();
				appParams["car"] = "Dodge";
				appParams["job"] = "builder";
				appParams["animal"] = "rat";
				ms.putAppData(this.userId_internal, appParams, this.onPutRequestComplete);
			}
			
			public function testPutGlobalAppData():void
			{
				//test putGlobalAppData
				var appParams:Object = new Object();
				/* appParams["car"] = "Porsche";
				appParams["job"] = "driver";
				appParams["animal"] = "dino";
				//appParams["oddvalues"] = "one|two;|&three";
				appParams["oddvalues"] = "one|two;|&three";
				appParams["robtest"] = "1260347=9818074&1349207=9818074&13700208=9818074&14564667=9818074&1475256=9818074&152122266=9818074&1538963=9818074&16119365=9818074&1876370=9818074&2055783=9818074&2202046=9818074&2341321=9818074&2632366=9818074&2796827=9818074&31888=9818074&348477570=492787761%5F484110866&393807570=348477570&4255200=9818074&484110866=492787761%5F348477570&484112376=484110866&486764172=348477570&486977573=484110866&492787761=484110866%5F348477570&5019603=9818074&55032737=9818074&6221=492787761%5F348477570&828448=9818074&8756606=9818074";
				appParams["robtest_BAD"] = "1260347=9818074&1349207=9818074&13700208=9818074&14564667=9818074&1475256=9818074&152122266=9818074&1538963=9818074&16119365=9818074&1876370=9818074&2055783=9818074&2202046=9818074&2341321=9818074&2632366=9818074&2796827=9818074&31888=9818074&348477570=492787761%2C484110866&393807570=348477570&4255200=9818074&484110866=492787761%2C348477570&484112376=484110866&486764172=348477570&486977573=484110866&492787761=484110866%2C348477570&5019603=9818074&55032737=9818074&6221=492787761%2C348477570&828448=9818074&8756606=9818074";
				 */
				appParams = {"492787761" : "484110866,348477570", "492787762" : "484110866_348477570"};
				 
				ms.putGlobalAppData(appParams, this.onPutRequestComplete);
			}
		
			public function getProfile ():void
			{				
				ms.setDateFormatTimeZone("ISO8601",8);
				ms.getProfile(this.userId_internal, onGetProfileRequestComplete);				
			}
			
			public function getActivities ():void
			{
				ms.getActivitiesAtom(this.userId_internal, onGetActivitiesRequestComplete, null, null, "ProfileSongAdd|PhotoAdd", "actor");
			}
			
			public function getStatus ():void
			{
				ms.getStatus(this.userId_internal, onGetStatusRequestComplete);
				this.editStatusButton.visible = true;
				this.profileStatusTitle.visible = true;
			}
			
			public function getMood ():void
			{
				ms.getMood(this.userId_internal, onGetMoodRequestComplete);	
			}
			
			public function getMoods ():void
			{
				this.moodDropDown.visible = true;
				this.moodTitle.visible = true;
				this.updateMoodButton.visible = true;
				ms.getMoods(this.userId_internal, onGetMoodsRequestComplete, "ru-RU");	
			}
			
			public function getPhotoAlbums():void
			{
				this.photoAlbums.visible = true;
				this.photoAlbumsLabel.visible = true;
				this.addPhotoButton.visible = true;
				this.addPhotoFilePath.visible = true;
				this.uploadPhotoButton.visible = true;
				this.addPhotoCaption.visible = true;
				this.addPhotoCaptionLabel.visible = true;
				
				ms2.getAlbums(this.userId_internal, onGetAlbumsRequestComplete);
				
			}
			
			public function onRequestCompleteRequestToken (response:String):void
			{
				//raw request token key and secret
				trace(response);
				/*
					OAuthToken can either taken key(token)/secret values, 
					or a raw response string, which it parses
				*/
				this.oAuthToken = new OAuthToken("","",response);
				
				var authURL:String = ms.getAuthorizationURL(this.oAuthToken);
				trace("Authorization URL: " + authURL);
				
				/*
					now you need to copy/paste the Authorization URL into
					a browser window and confirm (login or click continue)
					
					next, copy/paste the traced raw string of token/secret 
					into the oAuthToken contructor in testGetAccessToken()
					
					next, copy/paste verified from redirected-to URL, and
					pass it into the getAccessToken function 
					(in testGetAccessToken())
					
					now run testGetAccessToken()
				*/
			}
		
			public function onRequestCompleteAccessToken (response:String):void
			{
				trace("=================onRequestCompleteAccessToken===================");
				trace(response);
				/*
					OAuthToken can either taken key(token)/secret values, 
					or a raw response string, which it parses
				*/
				this.oAuthAccessToken = new OAuthToken("","",response);
				ms2 = new MySpace(this.key_OFFSITE, this.secret_OFFSITE, true, this.oAuthAccessToken.key, this.oAuthAccessToken.secret);
				ms2.getUserId(onRequestUserIdComplete);
				ms2.getUser(onGetRequestComplete);
				ms2.getMediaItemMetadata("http://opensocial.myspace.com/roa/09/mediaitems/myspace.com.person.12353591/@self/myspace.com.album.3487567/myspace.com.mediaItem.image.67654641", this.onGetRequestComplete);
				//this.addPhoto("3487567");
				//ms2.addAlbum(this.userId_internal, "August 2 & 3", this.onAddAlbumComplete);
				//ms2.getAlbums(this.userId_internal, this.onGetRequestComplete);
				this.getPhotoAlbums();
			}
			
			public function onAddAlbumComplete (albumID:String, rawResponse:String):void
			{
				trace("=================onAddAlbumComplete===================");
				trace(albumID);
				trace(rawResponse);
			}
			
			public function addPhotoToAlbum():void
			{
				var file:File = File.desktopDirectory;
				
				file.addEventListener(Event.SELECT, photoFileSelected);
				file.browseForOpen("Select photo to upload to \"" + this.getSelectedAlbumTitle() + "\" album");												
			}
			
			private function photoFileSelected(e:Event):void
			{
				trace(File(e.currentTarget).url);
				this.addPhotoFilePath.text = File(e.currentTarget).url;				
			}
			
			private function uploadPhotoToAlbum ():void
			{
				this.addPhoto(this.getSelectedAlbumID(), new File(this.addPhotoFilePath.text), this.addPhotoCaption.text);	
			}
			
			private function getSelectedAlbumTitle ():String
			{
				return this.photoAlbums.dataProvider[this.photoAlbums.selectedIndex].label;
					
			}
			
			private function getSelectedAlbumID ():String
			{
				return this.photoAlbums.dataProvider[this.photoAlbums.selectedIndex].data;
					
			}
			
			public function addPhoto(albumid:String, file:File, caption:String):void
			{
				//var file:File = new File("file:///C:/spain9.jpg"); 
				var stream:FileStream = new FileStream(); 
				var imageData:ByteArray = new ByteArray(); 

				stream.open(file, FileMode.READ);
				stream.readBytes(imageData, 0, file.size);
				stream.close();
								
				ms2.addPhoto(this.userId_internal, albumid, caption, imageData, "image/jpeg", onAddPhotoComplete);
			}
			
			public function onAddPhotoComplete (statusLink:String, imageMetadataUrl:String):void
			{
				trace(statusLink);
				trace(imageMetadataUrl);
			}
			
			public function onRequestUserIdComplete (retrievedUserId:String):void
			{
				trace("=================onRequestUserIdComplete===================");
				trace("USER ID: " + retrievedUserId);
			}
		
			public function onPutRequestComplete ():void
			{
				trace("=================onPutRequestComplete===================");
			}
			
			public function onGetRequestComplete (xml:XML):void
			{
				trace("=================onGetRequestComplete===================");
				trace(xml);
			}
			
			public function onGetFriendsRequestComplete (xml:XML):void
			{
				trace("=================onGetFriendsRequestComplete===================");
				
				this.dataTextArea.htmlText = "Friends:<br><br>";
				for each (var tempXML:XML in xml._xml_ns::friends.children())
				{
					this.dataTextArea.htmlText += "<a href='" + tempXML._xml_ns::weburi + "'>" + tempXML._xml_ns::displayname + "</a><br>";
				}										
				
			}
			
			public function onGetMoodRequestComplete (xml:XML):void
			{
				trace("=================onGetMoodRequestComplete===================");

				this._moodId = xml._xml_ns::moodId.toString();
				if(!this._isMoodUpdating)
				{
					this.selectMood(this._moodId);
					this.moodIcon.source = xml._xml_ns::moodimageurl;							
				}
			}
			
			private function selectMood (moodId:String):void
			{
				for(var x:Number = 0; x < this.moodDropDown.dataProvider.length; x++)
				{
					//select mood from drop down based on moodId
					if(this.moodDropDown.dataProvider[x].data == moodId)
					{	
						this.moodDropDown.selectedIndex = x;
					}
				}
			}
			
			public function onGetAlbumsRequestComplete (xml:XML):void
			{
				trace("=================onGetAlbumsRequestComplete===================");
				//trace(xml);
				
				var dataArray:Array = new Array;
				
				for each (var tempXML:XML in xml._xml_ns::albums.children())
				{
					var dataObject:Object = new Object();
					
					trace(tempXML.name());
					trace(tempXML._xml_ns::albumid + " and " + tempXML._xml_ns::title);

					dataObject["data"] = tempXML._xml_ns::albumid ;
					dataObject["label"] = tempXML._xml_ns::title;
					dataArray.push(dataObject);					
				}	
				
				this.photoAlbums.dataProvider = dataArray;	 							
			}
			
			public function onGetMoodsRequestComplete (xml:XML):void
			{
				trace("=================onGetMoodsRequestComplete===================");
				//trace(xml);
				
				var dataArray:Array = new Array;
				
				for each (var tempXML:XML in xml.children())
				{
					var dataObject:Object = new Object();
					
					dataObject["data"] = tempXML.attribute("moodId");
					dataObject["label"] = tempXML.attribute("moodName");
					dataArray.push(dataObject);					
				}	
				
				this.moodDropDown.dataProvider = dataArray;								
			}
			
			public function onGetProfileRequestComplete (xml:XML):void
			{
				trace("=================onGetProfileRequestComplete===================");
				//trace(xml);
				
				profilePhoto.source = xml._xml_ns::imageuri;
				profileName.text = xml._xml_ns::displayname;
				profileGender.text = xml._xml_ns::profile._xml_ns::gender;
				profileLastUpdate.text = "Last update: " + xml._xml_ns::lastupdateddate;
			}
			
			public function onGetActivitiesRequestComplete (xml:XML):void
			{				
				trace("=================onGetActivitiesRequestComplete===================");
				trace(xml);
				
				var w3_ns:Namespace = new Namespace("http://www.w3.org/2005/Atom");
				
				this.friendsButton.visible = true;
				this.activitiesButton.visible = true;
				this.dataTextArea.visible = true;
				this.dataTextArea.htmlText = "Activities:<br><br>";
				for each (var tempXML:XML in xml.children())
				{
					if(tempXML.name() == "http://www.w3.org/2005/Atom::entry")
					{								
						for each (var tempXML2:XML in tempXML.w3_ns::content.children().children())
						{
							if(tempXML2.name() == "http://www.w3.org/1999/xhtml::h5")
								this.dataTextArea.htmlText += tempXML2.children().toString().split("\n").join(" ") + "<br><br>";
						}
					}
				}								
			}
			
			public function onGetStatusRequestComplete (xml:XML):void
			{
				trace("=================onGetStatusRequestComplete===================");
				
				this.profileStatus.text = xml._xml_ns::status.toString();				
			}
			
			public function clearDisplay ():void
			{
				this.profileName.text = "";
				this.profileGender.text = "";
				this.profileLastUpdate.text = "";
				this.profilePhoto.source = "";
				this.dataTextArea.visible = false;
				this.profileStatus.text = "";
				this.profileStatusTitle.visible = false;
				this.editStatusButton.visible = false;
				this.saveStatusButton.visible = false;
				this.newProfileStatus.visible = false;
				this.moodDropDown.visible = false;
				this.moodTitle.visible = false;
				this.moodIcon.source = "";
				this.updateMoodButton.visible = false;
				this.activitiesButton.visible = false;
				this.friendsButton.visible = false;
				this.photoAlbums.visible = false;
				this.photoAlbumsLabel.visible = false;
				this.addPhotoButton.visible = false;
				this.addPhotoFilePath.visible = false;
				this.uploadPhotoButton.visible = false;
				this.addPhotoCaption.visible = false;
				this.addPhotoCaptionLabel.visible = false;
			}
			
			public function editStatus ():void
			{
				this.profileStatus.visible = false;
				this.newProfileStatus.visible = true;
				this.newProfileStatus.text = this.profileStatus.text;
				
				this.editStatusButton.visible = false;
				this.saveStatusButton.visible = true;
				this.cancelStatusButton.visible = true;
			}
			
			public function saveStatus (save:Boolean = true):void
			{
				this.saveStatusButton.visible = false;
				this.cancelStatusButton.visible = false;
				this.newProfileStatus.visible = false;
				this.profileStatus.visible = true;
				
				if(save)
					ms.setStatus(this.userId_internal, this.newProfileStatus.text, onSetStatusRequestComplete);
				else
				{
					this.editStatusButton.visible = true;
					this.profileStatusTitle.visible = true;
				}
			}
			
			public function onSetStatusRequestComplete ():void
			{
				trace("=================onSetStatusRequestComplete===================");
				
				_timerStatus = new Timer(500,5); //data is soemtimes updated at a delay; trye 5 times every 1/2 second
				_timerStatus.addEventListener(TimerEvent.TIMER, statusListener);
				_timerStatus.start();
			}
			
			public function statusListener (e:TimerEvent):void
			{
				if(this.profileStatus.text != this.newProfileStatus.text)
					this.getStatus();
				else
				{
					_timerStatus.stop();
				}
			}	
			
			public function updateMood ():void
			{	
				//set the newly selected mood	
				this._isMoodUpdating = true;	
				var newMoodId:Number = Number(this.moodDropDown.dataProvider[this.moodDropDown.selectedIndex].data);
				ms.setMood(this.userId_internal, newMoodId, onSetMoodRequestComplete);
				
			}
			
			public function onSetMoodRequestComplete ():void
			{
				trace("=================onSetMoodRequestComplete===================");
				
				_timerMood = new Timer(1000,5); //data is soemtimes updated at a delay; trye 5 times every 1/2 second
				_timerMood.addEventListener(TimerEvent.TIMER, moodListener);
				_timerMood.start();
			}
			
			public function moodListener (e:TimerEvent):void
			{
				trace(this._moodId);
				trace(this.moodDropDown.dataProvider[this.moodDropDown.selectedIndex].data);
				if(this._moodId != String(this.moodDropDown.dataProvider[this.moodDropDown.selectedIndex].data))
					this.getMood();	//get user's current mood
				else
				{
					this._isMoodUpdating = false;
					_timerMood.stop();
					this.getMood();
				}
			}
						
		]]>
		
	</mx:Script>
	
	<mx:Label x="10" y="10" text="MySpace UserID (FriendID): 12353591"/>	
	<mx:Button x="442" y="8" label="Clear" id="clearDisplayButton" click="clearDisplay()"/>
	<mx:Button x="290" y="8" label="Get User Information" id="getDataButton" click="getAll()"/>
	<mx:Button id="editStatusButton" x="300" y="93" label="change status" click="editStatus()" visible="false"/>
	<mx:Button id="saveStatusButton" x="300" y="93" label="save status" click="saveStatus()" visible="false"/>
	<mx:Button id="cancelStatusButton" x="397" y="93" label="cancel" click="saveStatus(false)" visible="false"/>
	
	<mx:Label id="profileName" x="115" y="35" fontSize="15" fontWeight="bold" />
	<mx:Label id="profileGender" x="115" y="55" fontSize="13" fontWeight="bold" />
	<mx:Label id="profileLastUpdate" x="115" y="75" fontSize="12" fontWeight="normal" />
	<mx:Label id="profileStatus" x="165" y="95" fontSize="12" fontWeight="normal" />
	<mx:Label id="profileStatusTitle" x="115" y="95" fontSize="12" fontWeight="normal" text="Status: " visible="false" />
	<mx:Image id="profilePhoto" x="10" y="35" />
	
	<mx:TextInput id="newProfileStatus" x="165" y="93" width="130" visible="false"/>
	<mx:TextArea id="dataTextArea" x="115" y="250" fontSize="11" width="350" height="350" visible="false" borderThickness="2" borderColor="#333333" />
	
	<mx:ComboBox id="moodDropDown" x="176" y="117" width="120" visible="false" />
	<mx:Label id="moodTitle" x="115" y="119" fontSize="12" fontWeight="normal" text="Mood: " visible="false" />
	<mx:Image id="moodIcon" x="158" y="121" />
	<mx:Button id="updateMoodButton" x="300" y="117" label="update mood" click="updateMood()" visible="false"/>
	
	<mx:Button id="activitiesButton" x="115" y="225" label="activities" click="getActivities()" visible="false"/>
	<mx:Button id="friendsButton" x="200" y="225" label="friends" click="getFriends()" visible="false"/>
	
	<mx:Label id="photoAlbumsLabel" x="115" y="150" fontWeight="normal" fontSize="12" text="Photo Albums: " visible="false" />
	<mx:ComboBox id="photoAlbums" x="215" y="150" width="150" visible="false"/>
	<mx:Button id="addPhotoButton" x="400" y="150" label="add photo" click="addPhotoToAlbum()" visible="false"/>
	<mx:TextInput id="addPhotoFilePath" x="205" y="180" width="190" visible="false"/>
	<mx:Label id="addPhotoCaptionLabel" x="115" y="200" fontWeight="normal" fontSize="12" text="caption: " visible="false" />
	<mx:TextInput id="addPhotoCaption" x="205" y="200" width="190" visible="false"/>
	<mx:Button id="uploadPhotoButton" x="400" y="180" label="upload photo" click="uploadPhotoToAlbum()" visible="false"/> 
</mx:WindowedApplication>
